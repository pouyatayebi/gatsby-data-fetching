{"version":3,"sources":["../../../src/utils/graphql-typegen/ts-codegen.ts"],"names":["OUTPUT_PATH","NAMESPACE","DEFAULT_TYPESCRIPT_CONFIG","avoidOptionals","immutableTypes","maybeValue","noExport","enumsAsTypes","scalars","Date","JSON","useTypeImports","DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG","exportFragmentSpreadSubTypes","writeTypeScriptTypes","directory","schema","definitions","pluginConfig","pluginMap","add","require","typescript","typescriptOperations","plugins","placement","content","filename","gatsbyNodeDocuments","loaders","CodeFileLoader","pluckConfig","modules","name","identifier","e","documents","values","map","definitionMeta","document","kind","Kind","DOCUMENT","def","hash","toString","isVerbose","process","env","gatsby_log_level","codegenOptions","undefined","schemaAst","concat","config","namingConvention","typeNames","enumValues","transformUnderscore","addUnderscoreToArgsType","skipTypename","flattenGeneratedTypes","skipDocumentsValidation","result","fs","outputFile"],"mappings":"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","sourcesContent":["import * as fs from \"fs-extra\"\nimport { join } from \"path\"\nimport { codegen } from \"@graphql-codegen/core\"\nimport { GraphQLSchema, Kind } from \"graphql\"\nimport type { Types } from \"@graphql-codegen/plugin-helpers\"\nimport type { TypeScriptPluginConfig } from \"@graphql-codegen/typescript/config\"\nimport type { TypeScriptDocumentsPluginConfig } from \"@graphql-codegen/typescript-operations/config\"\nimport { CodeFileLoader } from \"@graphql-tools/code-file-loader\"\nimport { loadDocuments } from \"@graphql-tools/load\"\nimport { IDefinitionMeta, IStateProgram } from \"../../redux/types\"\nimport { filterTargetDefinitions, stabilizeSchema } from \"./utils\"\n\nconst OUTPUT_PATH = `src/gatsby-types.d.ts`\nconst NAMESPACE = `Queries`\n\n// These override the defaults from\n// https://www.graphql-code-generator.com/plugins/typescript\nconst DEFAULT_TYPESCRIPT_CONFIG: Readonly<TypeScriptPluginConfig> = {\n  // <Maybe> Type is enough\n  avoidOptionals: true,\n  // Types come from the data layer so they can't be modified\n  immutableTypes: true,\n  // TODO: Better maybeValue\n  maybeValue: `T | null`,\n  // We'll want to re-export ourselves\n  noExport: true,\n  // Recommended for .d.ts files\n  enumsAsTypes: true,\n  scalars: {\n    Date: `string`,\n    JSON: `Record<string, unknown>`,\n  },\n  // import type {} syntax is nicer\n  useTypeImports: true,\n}\n\nconst DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG: Readonly<TypeScriptDocumentsPluginConfig> =\n  {\n    ...DEFAULT_TYPESCRIPT_CONFIG,\n    exportFragmentSpreadSubTypes: true,\n  }\n\nexport async function writeTypeScriptTypes(\n  directory: IStateProgram[\"directory\"],\n  schema: GraphQLSchema,\n  definitions: Map<string, IDefinitionMeta>\n): Promise<void> {\n  const pluginConfig: Pick<Types.GenerateOptions, \"plugins\" | \"pluginMap\"> = {\n    pluginMap: {\n      add: require(`@graphql-codegen/add`),\n      typescript: require(`@graphql-codegen/typescript`),\n      typescriptOperations: require(`@graphql-codegen/typescript-operations`),\n    },\n    plugins: [\n      {\n        add: {\n          placement: `prepend`,\n          content: `/* eslint-disable */\\n`,\n        },\n      },\n      {\n        add: {\n          placement: `prepend`,\n          content: `/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */\\n`,\n        },\n      },\n      {\n        add: {\n          placement: `prepend`,\n          content: `declare namespace ${NAMESPACE} {\\n`,\n        },\n      },\n      {\n        typescript: DEFAULT_TYPESCRIPT_CONFIG,\n      },\n      {\n        typescriptOperations: DEFAULT_TYPESCRIPT_OPERATIONS_CONFIG,\n      },\n      {\n        add: {\n          placement: `append`,\n          content: `\\n}\\n`,\n        },\n      },\n    ],\n  }\n\n  const filename = join(directory, OUTPUT_PATH)\n\n  let gatsbyNodeDocuments: Array<Types.DocumentFile> = []\n  // The loadDocuments + CodeFileLoader looks for graphql(``) functions inside the gatsby-node.ts files\n  // And then extracts the queries into documents\n  // TODO: This codepath can be made obsolete if Gatsby itself already places the queries inside gatsby-node into the `definitions`\n  try {\n    gatsbyNodeDocuments = await loadDocuments(\n      [`./gatsby-node.ts`, `./plugins/**/gatsby-node.ts`],\n      {\n        loaders: [\n          new CodeFileLoader({\n            // Configures https://www.graphql-tools.com/docs/graphql-tag-pluck to only check graphql function from Gatsby\n            pluckConfig: {\n              modules: [{ name: `gatsby`, identifier: `graphql` }],\n            },\n          }),\n        ],\n      }\n    )\n  } catch (e) {\n    // These files might not exist, so just skip this\n  }\n\n  const documents: Array<Types.DocumentFile> = [\n    ...filterTargetDefinitions(definitions).values(),\n  ].map(definitionMeta => {\n    return {\n      document: {\n        kind: Kind.DOCUMENT,\n        definitions: [definitionMeta.def],\n      },\n      hash: definitionMeta.hash.toString(),\n    }\n  })\n\n  const isVerbose = process.env.gatsby_log_level === `verbose`\n\n  const codegenOptions: Omit<Types.GenerateOptions, \"plugins\" | \"pluginMap\"> = {\n    // @ts-ignore - Incorrect types\n    schema: undefined,\n    schemaAst: stabilizeSchema(schema),\n    documents: documents.concat(gatsbyNodeDocuments),\n    filename,\n    config: {\n      namingConvention: {\n        typeNames: `keep`,\n        enumValues: `keep`,\n        transformUnderscore: false,\n      },\n      addUnderscoreToArgsType: true,\n      skipTypename: true,\n      flattenGeneratedTypes: true,\n    },\n    skipDocumentsValidation: !isVerbose,\n  }\n\n  const result = await codegen({\n    ...pluginConfig,\n    ...codegenOptions,\n  })\n\n  await fs.outputFile(filename, result)\n}\n"],"file":"ts-codegen.js"}