{"version":3,"sources":["../../../src/utils/graphql-typegen/file-writes.ts"],"names":["OUTPUT_PATHS","schema","fragments","config","writeGraphQLConfig","program","base","directory","outputPath","fs","existsSync","reporter","verbose","configJSONString","JSON","stringify","documents","extensions","endpoints","default","url","https","host","proxyPort","outputFile","err","error","writeGraphQLFragments","definitions","fragmentString","Array","from","entries","filter","_","def","isFragment","map","filePath","printedAst","join","writeGraphQLSchema","schemaSDLString","commentDescriptions"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAG,+BADU;AAEnBC,EAAAA,SAAS,EAAG,kCAFO;AAGnBC,EAAAA,MAAM,EAAG;AAHU,CAArB;;AAMO,eAAeC,kBAAf,CACLC,OADK,EAEU;AACf,MAAI;AACF,UAAMC,IAAI,GAAGD,OAAO,CAACE,SAArB;AACA,UAAMC,UAAU,GAAG,gBAAKF,IAAL,EAAWN,YAAY,CAACG,MAAxB,CAAnB;;AAEA,QAAIM,EAAE,CAACC,UAAH,CAAcF,UAAd,CAAJ,EAA+B;AAC7BG,wBAASC,OAAT,CAAkB,iDAAlB;;AACA;AACD;;AAED,UAAMC,gBAAgB,GAAGC,IAAI,CAACC,SAAL,CACvB;AACEd,MAAAA,MAAM,EAAED,YAAY,CAACC,MADvB;AAEEe,MAAAA,SAAS,EAAE,CAAE,2BAAF,EAA8BhB,YAAY,CAACE,SAA3C,CAFb;AAGEe,MAAAA,UAAU,EAAE;AACVC,QAAAA,SAAS,EAAE;AACTC,UAAAA,OAAO,EAAE;AACPC,YAAAA,GAAG,EAAG,GAAEf,OAAO,CAACgB,KAAR,GAAiB,UAAjB,GAA8B,SAAS,GAAEhB,OAAO,CAACiB,IAAK,IAC5DjB,OAAO,CAACkB,SACT;AAHM;AADA;AADD;AAHd,KADuB,EAcvB,IAduB,EAevB,CAfuB,CAAzB;AAkBA,UAAMd,EAAE,CAACe,UAAH,CAAchB,UAAd,EAA0BK,gBAA1B,CAAN;;AACAF,sBAASC,OAAT,CAAkB,0CAAlB;AACD,GA7BD,CA6BE,OAAOa,GAAP,EAAY;AACZd,sBAASe,KAAT,CAAgB,qCAAhB,EAAsDD,GAAtD;AACD;AACF;;AAEM,eAAeE,qBAAf,CACLpB,SADK,EAELqB,WAFK,EAGU;AACf,MAAI;AACF,UAAMC,cAAc,GAAGC,KAAK,CAACC,IAAN,CAAWH,WAAW,CAACI,OAAZ,EAAX,EACpBC,MADoB,CACb,CAAC,CAACC,CAAD,EAAIC,GAAJ,CAAD,KAAcA,GAAG,CAACC,UADL,EAEpBC,GAFoB,CAEhB,CAAC,CAACH,CAAD,EAAIC,GAAJ,CAAD,KAAe,KAAIA,GAAG,CAACG,QAAS,KAAIH,GAAG,CAACI,UAAW,EAFnC,EAGpBC,IAHoB,CAGd,IAHc,CAAvB;AAKA,UAAM/B,EAAE,CAACe,UAAH,CAAc,gBAAKjB,SAAL,EAAgBP,YAAY,CAACE,SAA7B,CAAd,EAAuD2B,cAAvD,CAAN;;AACAlB,sBAASC,OAAT,CAAkB,wCAAlB;AACD,GARD,CAQE,OAAOa,GAAP,EAAY;AACZd,sBAASe,KAAT,CAAgB,6CAAhB,EAA8DD,GAA9D;AACD;AACF;;AAEM,eAAegB,kBAAf,CACLlC,SADK,EAELN,MAFK,EAGU;AACf,MAAI;AACF,UAAMyC,eAAe,GAAG,0BAAY,4BAAgBzC,MAAhB,CAAZ,EAAqC;AAC3D0C,MAAAA,mBAAmB,EAAE;AADsC,KAArC,CAAxB;AAIA,UAAMlC,EAAE,CAACe,UAAH,CAAc,gBAAKjB,SAAL,EAAgBP,YAAY,CAACC,MAA7B,CAAd,EAAoDyC,eAApD,CAAN;;AACA/B,sBAASC,OAAT,CAAkB,qCAAlB;AACD,GAPD,CAOE,OAAOa,GAAP,EAAY;AACZd,sBAASe,KAAT,CAAgB,0CAAhB,EAA2DD,GAA3D;AACD;AACF","sourcesContent":["import * as fs from \"fs-extra\"\nimport { join } from \"path\"\nimport { GraphQLSchema, printSchema } from \"graphql\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport type { IDefinitionMeta, IStateProgram } from \"../../redux/types\"\nimport { stabilizeSchema } from \"./utils\"\n\nconst OUTPUT_PATHS = {\n  schema: `.cache/typegen/schema.graphql`,\n  fragments: `.cache/typegen/fragments.graphql`,\n  config: `.cache/typegen/graphql.config.json`,\n}\n\nexport async function writeGraphQLConfig(\n  program: IStateProgram\n): Promise<void> {\n  try {\n    const base = program.directory\n    const outputPath = join(base, OUTPUT_PATHS.config)\n\n    if (fs.existsSync(outputPath)) {\n      reporter.verbose(`graphql.config.json already exists. Skipping...`)\n      return\n    }\n\n    const configJSONString = JSON.stringify(\n      {\n        schema: OUTPUT_PATHS.schema,\n        documents: [`src/**/**.{ts,js,tsx,jsx}`, OUTPUT_PATHS.fragments],\n        extensions: {\n          endpoints: {\n            default: {\n              url: `${program.https ? `https://` : `http://`}${program.host}:${\n                program.proxyPort\n              }/___graphql`,\n            },\n          },\n        },\n      },\n      null,\n      2\n    )\n\n    await fs.outputFile(outputPath, configJSONString)\n    reporter.verbose(`Successfully created graphql.config.json`)\n  } catch (err) {\n    reporter.error(`Failed to write graphql.config.json`, err)\n  }\n}\n\nexport async function writeGraphQLFragments(\n  directory: IStateProgram[\"directory\"],\n  definitions: Map<string, IDefinitionMeta>\n): Promise<void> {\n  try {\n    const fragmentString = Array.from(definitions.entries())\n      .filter(([_, def]) => def.isFragment)\n      .map(([_, def]) => `# ${def.filePath}\\n${def.printedAst}`)\n      .join(`\\n`)\n\n    await fs.outputFile(join(directory, OUTPUT_PATHS.fragments), fragmentString)\n    reporter.verbose(`Wrote fragments.graphql file to .cache`)\n  } catch (err) {\n    reporter.error(`Failed to write fragments.graphql to .cache`, err)\n  }\n}\n\nexport async function writeGraphQLSchema(\n  directory: IStateProgram[\"directory\"],\n  schema: GraphQLSchema\n): Promise<void> {\n  try {\n    const schemaSDLString = printSchema(stabilizeSchema(schema), {\n      commentDescriptions: true,\n    })\n\n    await fs.outputFile(join(directory, OUTPUT_PATHS.schema), schemaSDLString)\n    reporter.verbose(`Successfully created schema.graphql`)\n  } catch (err) {\n    reporter.error(`Failed to write schema.graphql to .cache`, err)\n  }\n}\n"],"file":"file-writes.js"}