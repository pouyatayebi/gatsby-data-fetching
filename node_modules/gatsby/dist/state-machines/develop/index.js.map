{"version":3,"sources":["../../../src/state-machines/develop/index.ts"],"names":["RECOMPILE_PANIC_LIMIT","developConfig","id","initial","on","ADD_NODE_MUTATION","actions","SOURCE_FILE_CHANGED","WEBHOOK_RECEIVED","target","QUERY_RUN_REQUESTED","SET_SCHEMA","cond","ctx","process","env","GATSBY_GRAPHQL_TYPEGEN","shouldRunInitialTypegen","SET_GRAPHQL_DEFINITIONS","states","initializing","undefined","invoke","src","onDone","onError","initializingData","data","parentSpan","store","webhookBody","program","reporter","shouldRunCreatePagesStatefully","deferNodeMutation","runningPostBootstrap","runningQueries","gatsbyNodeGraphQLFunction","graphqlRunner","websocketManager","pendingQueryRuns","nodesMutatedDuringQueryRun","nodesMutatedDuringQueryRunRecompileCount","compiler","sourceFilesDirty","exit","recompiling","entry","startingDevServers","initialGraphQLTypegen","waiting","always","size","EXTRACT_QUERIES_NOW","nodeMutationBatch","runningBatch","reloadingData","webhookSourcePluginName","refresh","recreatingPages","developMachine","services","developServices","buildActions"],"mappings":"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","sourcesContent":["import {\n  MachineConfig,\n  AnyEventObject,\n  forwardTo,\n  createMachine,\n  assign,\n} from \"xstate\"\nimport { IDataLayerContext } from \"../data-layer/types\"\nimport { IQueryRunningContext } from \"../query-running/types\"\nimport { IWaitingContext } from \"../waiting/types\"\nimport { buildActions } from \"./actions\"\nimport { developServices } from \"./services\"\nimport { IBuildContext } from \"../../services\"\n\nconst RECOMPILE_PANIC_LIMIT = 6\n\n/**\n * This is the top-level state machine for the `gatsby develop` command\n */\nconst developConfig: MachineConfig<IBuildContext, any, AnyEventObject> = {\n  id: `build`,\n  initial: `initializing`,\n  // These are mutation events, sent to this machine by the mutation listener\n  // in `services/listen-for-mutations.ts`\n  on: {\n    // These are deferred node mutations, mainly `createNode`\n    ADD_NODE_MUTATION: {\n      actions: `addNodeMutation`,\n    },\n    // Sent when webpack or chokidar sees a changed file\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n    // These are calls to the refresh endpoint. Also used by Gatsby Preview.\n    // Saves the webhook body from the event into context, then reloads data\n    WEBHOOK_RECEIVED: {\n      target: `reloadingData`,\n      actions: `assignWebhookBody`,\n    },\n    QUERY_RUN_REQUESTED: {\n      actions: `trackRequestedQueryRun`,\n    },\n    SET_SCHEMA: {\n      actions: `schemaTypegen`,\n      cond: (ctx: IBuildContext): boolean =>\n        !!process.env.GATSBY_GRAPHQL_TYPEGEN && !ctx.shouldRunInitialTypegen,\n    },\n    SET_GRAPHQL_DEFINITIONS: {\n      actions: `definitionsTypegen`,\n      cond: (ctx: IBuildContext): boolean =>\n        !!process.env.GATSBY_GRAPHQL_TYPEGEN && !ctx.shouldRunInitialTypegen,\n    },\n  },\n  states: {\n    // Here we handle the initial bootstrap\n    initializing: {\n      on: {\n        // Ignore mutation events because we'll be running everything anyway\n        ADD_NODE_MUTATION: undefined,\n        SOURCE_FILE_CHANGED: undefined,\n        WEBHOOK_RECEIVED: undefined,\n      },\n      invoke: {\n        id: `initialize`,\n        src: `initialize`,\n        onDone: {\n          target: `initializingData`,\n          actions: [`assignStoreAndWorkerPool`, `spawnMutationListener`],\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Sourcing nodes, customising and inferring schema, then running createPages\n    initializingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `initialize-data`,\n        src: `initializeData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            shouldRunCreatePagesStatefully: true,\n            deferNodeMutation: true,\n            program,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningPostBootstrap`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    runningPostBootstrap: {\n      invoke: {\n        id: `post-bootstrap`,\n        src: `postBootstrap`,\n        onDone: `runningQueries`,\n      },\n    },\n    // Running page and static queries and generating the SSRed HTML and page data\n    runningQueries: {\n      on: {\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`run-queries`), `markSourceFilesDirty`],\n        },\n        ADD_NODE_MUTATION: {\n          actions: [`markNodesDirty`, `callApi`],\n        },\n        QUERY_RUN_REQUESTED: {\n          actions: forwardTo(`run-queries`),\n        },\n      },\n      invoke: {\n        id: `run-queries`,\n        src: `runQueries`,\n        // This is all the data that we're sending to the child machine\n        data: ({\n          program,\n          store,\n          parentSpan,\n          gatsbyNodeGraphQLFunction,\n          graphqlRunner,\n          websocketManager,\n          pendingQueryRuns,\n          reporter,\n        }: IBuildContext): IQueryRunningContext => {\n          return {\n            program,\n            store,\n            parentSpan,\n            gatsbyNodeGraphQLFunction,\n            graphqlRunner,\n            websocketManager,\n            pendingQueryRuns,\n            reporter,\n          }\n        },\n        onDone: [\n          {\n            // If we're at the recompile limit and nodes were mutated again then panic\n            target: `waiting`,\n            actions: `panicBecauseOfInfiniteLoop`,\n            cond: ({\n              nodesMutatedDuringQueryRun = false,\n              nodesMutatedDuringQueryRunRecompileCount = 0,\n            }: IBuildContext): boolean =>\n              nodesMutatedDuringQueryRun &&\n              nodesMutatedDuringQueryRunRecompileCount >= RECOMPILE_PANIC_LIMIT,\n          },\n          {\n            // Nodes were mutated while querying, so we need to re-run everything\n            target: `recreatingPages`,\n            cond: ({ nodesMutatedDuringQueryRun }: IBuildContext): boolean =>\n              !!nodesMutatedDuringQueryRun,\n            actions: [\n              `markNodesClean`,\n              `incrementRecompileCount`,\n              `clearPendingQueryRuns`,\n            ],\n          },\n          {\n            // If we have no compiler (i.e. it's first run), then spin up the\n            // webpack and socket.io servers\n            target: `startingDevServers`,\n            actions: [`setQueryRunningFinished`, `clearPendingQueryRuns`],\n            cond: ({ compiler }: IBuildContext): boolean => !compiler,\n          },\n          {\n            // If source files have changed, then recompile the JS bundle\n            target: `recompiling`,\n            cond: ({ sourceFilesDirty }: IBuildContext): boolean =>\n              !!sourceFilesDirty,\n            actions: [`clearPendingQueryRuns`],\n          },\n          {\n            // ...otherwise just wait.\n            target: `waiting`,\n            actions: [`clearPendingQueryRuns`],\n          },\n        ],\n        onError: {\n          actions: [`logError`, `clearPendingQueryRuns`],\n          target: `waiting`,\n        },\n      },\n      exit: assign<IBuildContext>({ shouldRunInitialTypegen: false }),\n    },\n    // Recompile the JS bundle\n    recompiling: {\n      // Important: mark source files as clean when recompiling starts\n      // Doing this `onDone` will wipe all file change events that occur **during** recompilation\n      // See https://github.com/gatsbyjs/gatsby/issues/27609\n      entry: [`setRecompiledFiles`, `markSourceFilesClean`],\n      invoke: {\n        src: `recompile`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Spin up webpack and socket.io\n    startingDevServers: {\n      invoke: {\n        src: `startWebpackServer`,\n        onDone: [\n          {\n            target: `initialGraphQLTypegen`,\n            cond: (): boolean => !!process.env.GATSBY_GRAPHQL_TYPEGEN,\n          },\n          {\n            target: `waiting`,\n          },\n        ],\n        onError: {\n          actions: `panic`,\n          target: `waiting`,\n        },\n      },\n      exit: [`assignServers`, `spawnWebpackListener`, `markSourceFilesClean`],\n    },\n    initialGraphQLTypegen: {\n      invoke: {\n        src: `graphQLTypegen`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Idle, waiting for events that make us rebuild\n    waiting: {\n      always: [\n        {\n          target: `runningQueries`,\n          cond: ({ pendingQueryRuns }: IBuildContext): boolean =>\n            !!pendingQueryRuns && pendingQueryRuns.size > 0,\n        },\n      ],\n      entry: [`saveDbState`, `resetRecompileCount`],\n      on: {\n        // Forward these events to the child machine, so it can handle batching\n        ADD_NODE_MUTATION: {\n          actions: forwardTo(`waiting`),\n        },\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`waiting`), `markSourceFilesDirty`],\n        },\n        // This event is sent from the child\n        EXTRACT_QUERIES_NOW: {\n          target: `runningQueries`,\n        },\n      },\n      invoke: {\n        id: `waiting`,\n        src: `waitForMutations`,\n        // Send existing queued mutations to the child machine, which will execute them\n        data: ({\n          store,\n          nodeMutationBatch = [],\n          sourceFilesDirty,\n        }: IBuildContext): IWaitingContext => {\n          return {\n            store,\n            nodeMutationBatch,\n            sourceFilesDirty,\n            runningBatch: [],\n          }\n        },\n        // \"done\" means we need to rebuild\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `recreatingPages`,\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Almost the same as initializing data, but skips various first-run stuff\n    reloadingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        src: `reloadData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          webhookSourcePluginName,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            webhookSourcePluginName,\n            refresh: true,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n            program,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Rebuild pages if a node has been mutated outside of sourceNodes\n    recreatingPages: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `recreate-pages`,\n        src: `recreatePages`,\n        data: ({\n          parentSpan,\n          store,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            program,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n  },\n}\n\nexport const developMachine = createMachine(developConfig, {\n  services: developServices,\n  actions: buildActions,\n})\n"],"file":"index.js"}