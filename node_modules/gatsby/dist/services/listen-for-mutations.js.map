{"version":3,"sources":["../../src/services/listen-for-mutations.ts"],"names":["listenForMutations","callback","emitMutation","event","type","payload","emitSourceChange","emitWebhook","emitQueryRunRequest","emitSetSchema","emitGraphQLDefinitions","emitter","on","unsubscribeFromMutationListening","off"],"mappings":";;;;;AAAA;;AAGO,MAAMA,kBAAkC,GAAIC,QAAD,IAA2B;AAC3E,QAAMC,YAAY,GAAIC,KAAD,IAA0B;AAC7CF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,mBAAT;AAA6BC,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMG,gBAAgB,GAAIH,KAAD,IAA0B;AACjDF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,qBAAT;AAA+BC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMI,WAAW,GAAIJ,KAAD,IAA0B;AAC5CF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,kBAAT;AAA4BC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMK,mBAAmB,GAAIL,KAAD,IAA0B;AACpDF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,qBAAT;AAA+BC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMM,aAAa,GAAIN,KAAD,IAA0B;AAC9CF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,YAAT;AAAsBC,MAAAA,OAAO,EAAEF;AAA/B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMO,sBAAsB,GAAIP,KAAD,IAA0B;AACvDF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,yBAAT;AAAmCC,MAAAA,OAAO,EAAEF;AAA5C,KAAD,CAAR;AACD,GAFD;;AAIAQ,iBAAQC,EAAR,CAAY,uBAAZ,EAAoCV,YAApC;;AACAS,iBAAQC,EAAR,CAAY,kBAAZ,EAA+BL,WAA/B;;AACAI,iBAAQC,EAAR,CAAY,qBAAZ,EAAkCN,gBAAlC;;AACAK,iBAAQC,EAAR,CAAY,qBAAZ,EAAkCJ,mBAAlC;;AACAG,iBAAQC,EAAR,CAAY,YAAZ,EAAyBH,aAAzB;;AACAE,iBAAQC,EAAR,CAAY,yBAAZ,EAAsCF,sBAAtC;;AAEA,SAAO,SAASG,gCAAT,GAAkD;AACvDF,mBAAQG,GAAR,CAAa,uBAAb,EAAqCZ,YAArC;;AACAS,mBAAQG,GAAR,CAAa,kBAAb,EAAgCP,WAAhC;;AACAI,mBAAQG,GAAR,CAAa,qBAAb,EAAmCR,gBAAnC;;AACAK,mBAAQG,GAAR,CAAa,qBAAb,EAAmCN,mBAAnC;;AACAG,mBAAQG,GAAR,CAAa,YAAb,EAA0BL,aAA1B;;AACAE,mBAAQG,GAAR,CAAa,yBAAb,EAAuCJ,sBAAvC;AACD,GAPD;AAQD,CAxCM","sourcesContent":["import { emitter } from \"../redux\"\nimport { InvokeCallback, Sender } from \"xstate\"\n\nexport const listenForMutations: InvokeCallback = (callback: Sender<any>) => {\n  const emitMutation = (event: unknown): void => {\n    callback({ type: `ADD_NODE_MUTATION`, payload: event })\n  }\n\n  const emitSourceChange = (event: unknown): void => {\n    callback({ type: `SOURCE_FILE_CHANGED`, payload: event })\n  }\n\n  const emitWebhook = (event: unknown): void => {\n    callback({ type: `WEBHOOK_RECEIVED`, payload: event })\n  }\n\n  const emitQueryRunRequest = (event: unknown): void => {\n    callback({ type: `QUERY_RUN_REQUESTED`, payload: event })\n  }\n\n  const emitSetSchema = (event: unknown): void => {\n    callback({ type: `SET_SCHEMA`, payload: event })\n  }\n\n  const emitGraphQLDefinitions = (event: unknown): void => {\n    callback({ type: `SET_GRAPHQL_DEFINITIONS`, payload: event })\n  }\n\n  emitter.on(`ENQUEUE_NODE_MUTATION`, emitMutation)\n  emitter.on(`WEBHOOK_RECEIVED`, emitWebhook)\n  emitter.on(`SOURCE_FILE_CHANGED`, emitSourceChange)\n  emitter.on(`QUERY_RUN_REQUESTED`, emitQueryRunRequest)\n  emitter.on(`SET_SCHEMA`, emitSetSchema)\n  emitter.on(`SET_GRAPHQL_DEFINITIONS`, emitGraphQLDefinitions)\n\n  return function unsubscribeFromMutationListening(): void {\n    emitter.off(`ENQUEUE_NODE_MUTATION`, emitMutation)\n    emitter.off(`WEBHOOK_RECEIVED`, emitWebhook)\n    emitter.off(`SOURCE_FILE_CHANGED`, emitSourceChange)\n    emitter.off(`QUERY_RUN_REQUESTED`, emitQueryRunRequest)\n    emitter.off(`SET_SCHEMA`, emitSetSchema)\n    emitter.off(`SET_GRAPHQL_DEFINITIONS`, emitGraphQLDefinitions)\n  }\n}\n"],"file":"listen-for-mutations.js"}